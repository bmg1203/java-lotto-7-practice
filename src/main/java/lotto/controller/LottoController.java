package lotto.controller;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import lotto.model.Lotto;
import lotto.service.LottoService;
import lotto.validator.BonusNumberValidator;
import lotto.validator.PurchaseAmountValidator;
import lotto.view.InputView;
import lotto.view.OutputView;

public class LottoController {

    private final InputView inputView;
    private final OutputView outputView;
    private final LottoService lottoService;
    private final PurchaseAmountValidator purchaseAmountValidator;
    private final BonusNumberValidator bonusNumberValidator;

    public LottoController(InputView inputView, OutputView outputView, LottoService lottoService,
                           PurchaseAmountValidator purchaseAmountValidator, BonusNumberValidator bonusNumberValidator) {
        this.inputView = inputView;
        this.outputView = outputView;
        this.lottoService = lottoService;
        this.purchaseAmountValidator = purchaseAmountValidator;
        this.bonusNumberValidator = bonusNumberValidator;
    }

    public void run() {
        String purchaseAmount = inputAndValidatePurchaseAmount();// 구입 금액 입력
        int lottoCount = calculateLottoCount(purchaseAmount);  // 구매 장수 계산
        System.out.println();
        List<Lotto> generatedLottoNumbers = generateAutoLottoNumbers(lottoCount); // 구매 결과 생성
        printAutoGeneratedLottoNumbers(lottoCount, generatedLottoNumbers);   // 구매 결과 출력
        // 당첨 번호 입력
        Lotto winningLottoNumber = inputAndChangeToLotto();// 정수 리스트로 변경// 로또로 변경
        System.out.println();
        // 보너스 번호 입력 및 검증
        String bonusNumber = inputAndValidateBonusNumber(winningLottoNumber);
        System.out.println();
        // 통계 계산
        Map<Integer, Integer> lottoStatistics = calculateLottoStatistics(winningLottoNumber, bonusNumber, generatedLottoNumbers);
        printStatistics(lottoStatistics); // 통계 출력

        int lottoSum = calculateProfits(lottoStatistics); // 수익금 계산
        double lottoRateOfReturn = lottoRateOfReturn(lottoCount, lottoSum);// 수익률 계산
        printRateOfReturn(lottoRateOfReturn);// 수익률 출력
    }

    private String inputAndValidatePurchaseAmount() { // 구입 금액 입력
        String purchaseAmount;
        while (true) {
            purchaseAmount = purchaseAmount();
            try {
                validateAmount(purchaseAmount);
                return purchaseAmount;
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private String purchaseAmount() {
        return inputView.inputPurchaseAmount();  // 구입 금액 입력받기
    }

    private void validateAmount(String purchaseAmount) {
        if (!purchaseAmountValidator.isValidPurchaseAmount(purchaseAmount)) {
            throw new IllegalArgumentException("[ERROR] 구입 금액은 1000원 단위여야 합니다.");
        }
    }

    private int calculateLottoCount(String purchaseAmount) {
        // 구매 장수 계산
        return lottoService.calculateLottoCount(purchaseAmount);
    }


    // 로또 장수만큼 생성하기
    private List<Lotto> generateAutoLottoNumbers(int lottoCount) {
        // lottoCount 개수 만큼 랜덤 로또 생성
        return lottoService.generateAutoLottoNumbers(lottoCount);
    }

    // 로또 장수 및 자동 결과 출력
    private void printAutoGeneratedLottoNumbers(int lottoCount, List<Lotto> generatedLottoNumbers) {
        // lottoCount 개수 만큼 랜덤 로또 출력
        outputView.printAutoGeneratedLottoNumbers(lottoCount, generatedLottoNumbers);
    }

    // 당첨 번호 입력 타입 변경 객체 생성
    private Lotto inputAndChangeToLotto() {
        String winningNumbers;
        while (true) {
            winningNumbers = inputWinningNumbers();
            try {
                List<Integer> changedWinningNumbers = changeWinningNumbers(winningNumbers);
                return winningNumbersToLotto(changedWinningNumbers);
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    // 당첨 번호 입력
    private String inputWinningNumbers() {
        return inputView.inputWinningNumbers();
    }

    private List<Integer> changeWinningNumbers(String winningNumbers) {
        return lottoService.changeWinningNumbers(winningNumbers);
    }

    // 로또 객체 생성
    private Lotto winningNumbersToLotto(List<Integer> changedLottoNumbers) {
        return new Lotto(changedLottoNumbers); // 유효한 경우 Lotto 객체 반환 // 안에서 숫자 검증
    }

    // 보너스 번호 입력 및 검증
    private String inputAndValidateBonusNumber(Lotto winningLottoNumbers) {
        String bonusNumber;
        while (true) {
            bonusNumber = bonusNumber();
            try {
                validateBonusNumber(bonusNumber, winningLottoNumbers);
                return bonusNumber;
            } catch (IllegalArgumentException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    private String bonusNumber() {
        return inputView.inputBonusNumber();
    }

    private void validateBonusNumber(String bonusNumber, Lotto winningLottoNumbers) {
        bonusNumberValidator.validBonusNumber(bonusNumber, winningLottoNumbers);
    }

    // 당첨 통계 계산
    private Map<Integer, Integer> calculateLottoStatistics(Lotto winningNumbers, String bonusNumber,
                                         List<Lotto> generatedLottoNumbers) {
        // 당첨 통계 계산
        return lottoService.calculateLottoStatistics(winningNumbers, bonusNumber, generatedLottoNumbers);
    }

    // 당첨 통계 출력
    private void printStatistics(Map<Integer, Integer> lottoStatistics) {
        outputView.printWinningStatistics(lottoStatistics);
    }

    // 수익금 계산
    private int calculateProfits(Map<Integer, Integer> lottoStatistics) {
        return lottoService.calculateProfits(lottoStatistics);
    }

    // 수익률 계산
    private double lottoRateOfReturn(int lottoCount, int lottoSum) {
        return lottoService.calculateRateOfReturn(lottoCount, lottoSum);
    }

    // 수익률 출력
    private void printRateOfReturn(double rateOfReturn) {
        outputView.printRateOfReturn(rateOfReturn);
    }


}
