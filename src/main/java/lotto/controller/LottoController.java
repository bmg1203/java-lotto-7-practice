package lotto.controller;

import java.util.List;
import java.util.stream.Collectors;
import lotto.model.Lotto;
import lotto.model.LottoBonusNumber;
import lotto.model.LottoCount;
import lotto.model.Lottos;
import lotto.service.LottoService;
import lotto.util.InputValidator;
import lotto.model.WinningDetails;
import lotto.view.InputView;
import lotto.view.OutputView;

public class LottoController {

    public static final String LINE_BREAK = "\n";
    private final InputView inputView;
    private final OutputView outputView;
    private final InputValidator inputValidator;
    private final LottoService lottoService;


    public LottoController(InputView inputView, OutputView outputView,
                           InputValidator inputValidator, LottoService lottoService) {
        this.inputView = inputView;
        this.outputView = outputView;
        this.inputValidator = inputValidator;
        this.lottoService = lottoService;
    }

    public void startLottoProcess() {
        int lottoCount = getValidLottoCount();
        outputView.printPurchasedLottoCount(lottoCount);

        Lottos autoGeneratedLottos = lottoService.generateLottos(lottoCount);
        displayAutoGeneratedLottos(autoGeneratedLottos);

        Lotto lottoNumbers = getValidLottoNumbers();
        Integer bonusNumber = getValidLottoBonusNumber(lottoNumbers);

        lottoService.determineWinningDetails(autoGeneratedLottos, lottoNumbers, bonusNumber);

        displayWinningDetails();
        displayYield(lottoCount);
    }

    private int getValidLottoCount() {
        String purchaseAmount = inputView.enteredPurchaseAmount();

        try {
            LottoCount lottoCount = new LottoCount(purchaseAmount, inputValidator);
            return lottoCount.getLottoCount();
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
            return getValidLottoCount();
        }
    }

    private void displayAutoGeneratedLottos(Lottos autoGeneratedLottos) {
        String collectedAutoGeneratedLottos = collectAutoGeneratedLottos(autoGeneratedLottos);
        outputView.printAutoGeneratedLotto(collectedAutoGeneratedLottos);
    }

    private String collectAutoGeneratedLottos(Lottos autoGeneratedLottos) {
        return autoGeneratedLottos.getLottos().stream()
                .map(lotto -> lotto.getLottoNumbers().toString())
                .collect(Collectors.joining(LINE_BREAK));
    }

    private Lotto getValidLottoNumbers() {
        String lottoNumbers = inputView.enteredLottoNumbers();

        try {
            return lottoService.parseLottoNumbers(lottoNumbers);
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
            return getValidLottoNumbers();
        }
    }

    private Integer getValidLottoBonusNumber(Lotto lottoNumbers) {
        String bonusNumber = inputView.enteredLottoBonusNumber();

        try {
            LottoBonusNumber lottoBonusNumber = new LottoBonusNumber(bonusNumber, lottoNumbers, inputValidator);
            return lottoBonusNumber.getLottoBonusNumber();
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
            return getValidLottoBonusNumber(lottoNumbers);
        }
    }

    private void displayWinningDetails() {
        outputView.startPrintWinning();

        for (WinningDetails winningDetail : WinningDetails.getWinningDetails()) {
            int sameNumberCount = winningDetail.getSameNumberCount();
            String winningPrize = winningDetail.getWinningPrize();
            int matchLottoCount = winningDetail.getMatchLottoCount();
            boolean matchBonus = winningDetail.getMatchBonusNumber();
            outputView.printWinningDetails(sameNumberCount, winningPrize, matchLottoCount, matchBonus);
        }
    }

    private void displayYield(int lottoCount) {
        String yield = lottoService.calculateYield(lottoCount);
        outputView.printYield(yield);
    }
}
